import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

def plot_timing_results():
    # Read the CSV file generated by the C++ program
    try:
        df = pd.read_csv('knapsack_timing_results.csv')
        
        # Create the plot
        plt.figure(figsize=(12, 8))
        
        # Plot both algorithms
        plt.plot(df['Size'], df['2D_DP_Time(ms)'], 'b-o', label='2D DP', linewidth=2, markersize=6)
        plt.plot(df['Size'], df['1D_DP_Time(ms)'], 'r-s', label='1D DP (Optimized)', linewidth=2, markersize=6)
        
        plt.xlabel('Problem Size (Number of Items)', fontsize=12)
        plt.ylabel('Execution Time (milliseconds)', fontsize=12)
        plt.title('Knapsack Problem: Time Complexity Analysis\n(Dynamic Programming)', fontsize=14, fontweight='bold')
        plt.legend(fontsize=11)
        plt.grid(True, alpha=0.3)
        
        # Add annotations for better understanding
        plt.text(0.05, 0.95, 'Time Complexity: O(n Ã— W)\nwhere n = items, W = capacity', 
                transform=plt.gca().transAxes, fontsize=10, 
                bbox=dict(boxstyle="round,pad=0.3", facecolor="lightblue", alpha=0.7),
                verticalalignment='top')
        
        plt.tight_layout()
        plt.savefig('knapsack_timing_graph.png', dpi=300, bbox_inches='tight')
        plt.show()
        
        # Print some statistics
        print("\nTiming Analysis Summary:")
        print("=" * 40)
        print(f"Size Range: {df['Size'].min()} - {df['Size'].max()} items")
        print(f"2D DP - Average time: {df['2D_DP_Time(ms)'].mean():.3f} ms")
        print(f"1D DP - Average time: {df['1D_DP_Time(ms)'].mean():.3f} ms")
        print(f"Performance ratio (2D/1D): {df['2D_DP_Time(ms)'].mean() / df['1D_DP_Time(ms)'].mean():.2f}x")
        
        # Check if results match
        all_match = df['2D_DP_Result'] == df['1D_DP_Result']
        print(f"Algorithm correctness: {all_match.all()} (all results match: {all_match.sum()}/{len(df)})")
        
    except FileNotFoundError:
        print("Error: knapsack_timing_results.csv not found!")
        print("Please run the C++ program first to generate the timing data.")
    except Exception as e:
        print(f"Error reading data: {e}")

if __name__ == "__main__":
    plot_timing_results()
